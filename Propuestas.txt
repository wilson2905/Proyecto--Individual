Propuesta de trabajo (requerimientos de aprobaci√≥n)

Transformaciones: Para este MVP no se te pide transformaciones de datos(aunque encuentres una motivo 
para hacerlo) pero trabajaremos en leer el dataset con el formato correcto. Puedes eliminar las 
columnas que no necesitan para responder las consultas o preparar los modelos de aprendizaje 
autom√°tico, y de esa manera optimizar el rendimiento de la API y el entrenamiento del modelo.
Feature Engineering: En el dataset user_reviews se incluyen rese√±as de juegos hechos por distintos 
usuarios. Debes crear la columna 'sentiment_analysis' aplicando an√°lisis de sentimiento con NLP con 
la siguiente escala: debe tomar el valor '0' si es malo, '1' si es neutral y '2' si es positivo. 
Esta nueva columna debe reemplazar la de user_reviews.review para facilitar el trabajo de los 
modelos de machine learning y el an√°lisis de datos. De no ser posible este an√°lisis por estar 
ausente la rese√±a escrita, debe tomar el valor de 1.
Desarrollo API: Propones disponibilizar los datos de la empresa usando el framework FastAPI. 
Las consultas que propones son las siguientes:
Debes crear las siguientes funciones para los endpoints que se consumir√°n en la API, recuerden que 
deben tener un decorador por cada una (@app.get(‚Äò/‚Äô)).
    
    def PlayTimeGenre( genero : str ): Debe devolver a√±o con mas horas jugadas para dicho g√©nero.
Ejemplo de retorno: {"A√±o de lanzamiento con m√°s horas jugadas para G√©nero X" : 2013}
    --user_items
    
    def UserForGenre( genero : str ): Debe devolver el usuario que acumula m√°s horas 
    jugadas para el g√©nero dado y una lista de la acumulaci√≥n de horas jugadas por a√±o.
Ejemplo de retorno: {"Usuario con m√°s horas jugadas para G√©nero X" : us213ndjss09sdf,
 "Horas jugadas":[{A√±o: 2013, Horas: 203}, {A√±o: 2012, Horas: 100}, {A√±o: 2011, Horas: 23}]}
    --user_items
    
    def UsersRecommend( a√±o : int ): Devuelve el top 3 de juegos M√ÅS recomendados por usuarios 
    para el a√±o dado. (reviews.recommend = True y comentarios positivos/neutrales)
Ejemplo de retorno: [{"Puesto 1" : X}, {"Puesto 2" : Y},{"Puesto 3" : Z}]
    --user_reviews
    
    def UsersWorstDeveloper( a√±o : int ): Devuelve el top 3 de desarrolladoras con juegos MENOS 
    recomendados por usuarios para el a√±o dado. (reviews.recommend = False y comentarios negativos)
Ejemplo de retorno: [{"Puesto 1" : X}, {"Puesto 2" : Y},{"Puesto 3" : Z}]
    --user_reviews
    
    def sentiment_analysis( empresa desarrolladora : str ): Seg√∫n la empresa desarrolladora,
     se devuelve un diccionario con el nombre de la desarrolladora como llave y una lista con
      la cantidad total de registros de rese√±as de usuarios que se encuentren categorizados con 
      un an√°lisis de sentimiento como valor.
Ejemplo de retorno: {'Valve' : [Negative = 182, Neutral = 120, Positive = 278]}
    --user_reviews
    
    
    Importante
    El MVP tiene que ser una API que pueda ser consumida segun los criterios de API REST o 
    RESTful desde cualquier dispositivo conectado a internet. Algunas herramientas como por
    ejemplo, Streamlit, si bien pueden brindar una interfaz de consulta, no cumplen con las 
    condiciones para ser consideradas una API, sin workarounds.
Deployment: Conoces sobre Render y tienes un tutorial de Render que te hace la vida mas f√°cil üòÑ .
 Tambi√©n podr√≠as usar Railway, o cualquier otro servicio que permita que la API pueda ser
  consumida desde la web.
An√°lisis exploratorio de los datos: (Exploratory Data Analysis-EDA)
Ya los datos est√°n limpios, ahora es tiempo de investigar las relaciones que hay entre las 
variables del dataset, ver si hay outliers o anomal√≠as (que no tienen que ser errores necesariamente
 üëÄ ), y ver si hay alg√∫n patr√≥n interesante que valga la pena explorar en un an√°lisis posterior. 
 Las nubes de palabras dan una buena idea de cu√°les palabras son m√°s frecuentes en los t√≠tulos, 
 ¬°podr√≠a ayudar al sistema de predicci√≥n! En esta ocasi√≥n vamos a pedirte que no uses librer√≠as
  para hacer EDA autom√°tico ya que queremos que pongas en pr√°ctica los conceptos y tareas 
  involucrados en el mismo. Puedes leer un poco m√°s sobre EDA en este articulo
Modelo de aprendizaje autom√°tico:
Una vez que toda la data es consumible por la API, est√° lista para consumir por los departamentos
 de Analytics y Machine Learning, y nuestro EDA nos permite entender bien los datos a los que 
 tenemos acceso, es hora de entrenar nuestro modelo de machine learning para armar un sistema 
 de recomendaci√≥n. Para ello, te ofrecen dos propuestas de trabajo: En la primera, el modelo 
 deber√° tener una relaci√≥n √≠tem-√≠tem, esto es se toma un item, en base a que tan similar esa 
 ese √≠tem al resto, se recomiendan similares. Aqu√≠ el input es un juego y el output es una lista 
 de juegos recomendados, para ello recomendamos aplicar la similitud del coseno. La otra propuesta 
 para el sistema de recomendaci√≥n debe aplicar el filtro user-item, esto es tomar un usuario, 
 se encuentran usuarios similares y se recomiendan √≠tems que a esos usuarios similares les gustaron.
  En este caso el input es un usuario y el output es una lista de juegos que se le recomienda a 
  ese usuario, en general se explican como ‚ÄúA usuarios que son similares a t√≠ tambi√©n les gust√≥‚Ä¶‚Äù.
   Deben crear al menos uno de los dos sistemas de recomendaci√≥n (Si se atreven a tomar el desaf√≠o,
    para mostrar su capacidad al equipo, ¬°pueden hacer ambos!). Tu l√≠der pide que el modelo derive 
    obligatoriamente en un GET/POST en la API s√≠mil al siguiente formato:
Si es un sistema de recomendaci√≥n item-item:
    def recomendacion_juego( id de producto ): Ingresando el id de producto, deber√≠amos recibir 
    una lista con 5 juegos recomendados similares al ingresado.
Si es un sistema de recomendaci√≥n user-item:
    def recomendacion_usuario( id de usuario ): Ingresando el id de un usuario, deber√≠amos recibir
     una lista con 5 juegos recomendados para dicho usuario.
Video: Necesitas que al equipo le quede claro que tus herramientas funcionan realmente! Haces un
 video mostrando el resultado de las consultas propuestas y de tu modelo de ML entrenado!
  Recuerda presentarte, contar muy brevemente de que trata el proyecto y lo que vas a estar 
  mostrando en el video. Para grabarlo, puedes usar la herramienta Zoom, haciendo una videollamada
   y grabando la pantalla, aunque seguramente buscando, encuentres muchas formas m√°s. üòâ
Spoiler: El video NO DEBE durar mas de 7 minutos y DEBE mostrar las consultas requeridas en 
funcionamiento desde la API y una breve explicaci√≥n del modelo utilizado para el sistema de 
recomendaci√≥n. En caso de que te sobre tiempo luego de grabarlo, puedes mostrar/explicar tu 
EDA, ETL e incluso c√≥mo desarrollaste la API. 